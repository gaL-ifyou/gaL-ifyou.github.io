<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gaL.github.io</id>
    <title>Gali</title>
    <updated>2020-05-10T02:14:21.756Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gaL.github.io"/>
    <link rel="self" href="https://gaL.github.io/atom.xml"/>
    <subtitle>区区微草、可以成原</subtitle>
    <logo>https://gaL.github.io/images/avatar.png</logo>
    <icon>https://gaL.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gali</rights>
    <entry>
        <title type="html"><![CDATA[Appium]]></title>
        <id>https://gaL.github.io/post/appnium</id>
        <link href="https://gaL.github.io/post/appnium">
        </link>
        <updated>2020-03-21T04:43:13.000Z</updated>
        <content type="html"><![CDATA[<p>appnium自动化部署<br>
参考https://blog.csdn.net/zh175578809/article/details/76780054</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[selenium+python]]></title>
        <id>https://gaL.github.io/post/seleniumpython</id>
        <link href="https://gaL.github.io/post/seleniumpython">
        </link>
        <updated>2020-03-14T07:49:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="环境安装">环境安装</h1>
<p>支持多环境多语言如chrome，firefox，Ie<br>
安装chrome，在工具栏中找到扩展插件搜索selenium IDE 进行添加</p>
<ul>
<li>1.安装chromedriver.exe下载地址http://chromedriver.storage.googleapis.com/index.html</li>
<li>2.将chromedriver.exe拷贝至谷歌浏览器目录（如 C:\Program Files\Google\Chrome\Application）以及python根目录（C:\Python37）。</li>
<li>3.将谷歌浏览器环境变量添加到path</li>
</ul>
<h1 id="webdriver-基础篇及方法调用">webdriver-基础篇及方法调用</h1>
<p><strong>基于python环境的搭建</strong></p>
<ul>
<li>Windows系统</li>
<li>Python 3.5（以上版本）</li>
<li>安装selenium包</li>
<li>浏览器</li>
<li>安装PyCharm<br>
<strong>webdriver元素定位方式</strong></li>
</ul>
<ol>
<li>id  --元素属性定位    &amp; find_element_by_id()</li>
<li>name --为元素属性定位 &amp; find_element_by_name()</li>
<li>class_name  --同上    &amp; find_element_by_class_name()</li>
<li>tag_name  ---为元素标签定位   &amp; find_element_by_tag_name()</li>
<li>link_text  --为超链接定位即a标签  &amp;  find_element_by_link_text()</li>
<li>partial_link_text   --同上   &amp;  find_element_by_partial_link_text()</li>
<li>Xpath  ---为元素路径定位  &amp; driver.find_element_by_xpath()</li>
<li>Css(推荐)  --为css选择器定位  &amp; driver.find_element_by_css_selector()</li>
</ol>
<ul>
<li>id选择器  -- 格式：#id</li>
<li>class选择器  --格式：.class</li>
<li>元素选择器 --格式：input &lt;选择所有input元素&gt;</li>
<li>属性选择器--[type=&quot;password&quot;]</li>
<li>层级选择器 --p&gt;input&gt;i  &amp; p [type='password']<br>
<strong>基本元素操作方法</strong></li>
</ul>
<ol>
<li>clear()            清除文本</li>
<li>send_keys()        模拟输入</li>
<li>click()            单击元素</li>
<li>sleep()          等待时间</li>
<li>size                 返回元素大小</li>
<li>text                 获取元素的文本</li>
<li>title                 获取页面title</li>
<li>current_url            获取当前页面URL</li>
<li>get_attribute()         获取属性值</li>
<li>is_display()            判断元素是否可见</li>
<li>is_enabled()            判断元素是否可用<br>
<strong>WebDriver操作浏览器常用方法</strong></li>
<li>maximize_window()                最大化 --&gt; 模拟浏览器最大化按钮</li>
<li>set_window_size(100,100)         浏览器大小 --&gt; 设置浏览器宽、高(像素点)</li>
<li>set_window_position(300,200)     浏览器位置 --&gt; 设置浏览器位置</li>
<li>back()                             后退 --&gt; 模拟浏览器后退按钮</li>
<li>forward()                         前进 --&gt; 模拟浏览器前进按钮</li>
<li>refresh()                         刷新 --&gt; 模拟浏览器F5刷新</li>
<li>close()                            关闭 --&gt; 模拟浏览器关闭按钮(关闭单个窗口)</li>
<li>quit()                            关闭 --&gt; 关闭所有WebDriver启动的窗口</li>
</ol>
<h1 id="webdriver中级篇">webDriver中级篇</h1>
<p><strong>webdriver鼠标键盘操作</strong><br>
现在Web产品中提供了丰富的鼠标交互方式，如：双击、悬停、拖拽等功能，做为Web产品测试框架，需要应对这些Web产品应用场景，所以在WebDriver类库中封装了相应的鼠标交互方法。</p>
<ol>
<li>context_click()            右击 --&gt; 此方法模拟鼠标右键点击效果</li>
<li>double_click()            双击 --&gt; 此方法模拟双标双击效果</li>
<li>drag_and_drop()            拖动 --&gt; 此方法模拟双标拖动效果</li>
<li>move_to_element()        悬停 --&gt; 此方法模拟鼠标悬停效果</li>
<li>perform()                执行 --&gt; 此方法用来执行以上所有鼠标方法<br>
<em>需要调用方法才可执行调用不同的方法以下通用</em><br>
具体代码如下：</li>
</ol>
<ul>
<li>导包：from selenium.webdriver.common.action_chains import ActionChains</li>
<li>实例化ActionChains对象：Action=ActionChains(driver)</li>
<li>调用右键方法：element=Action.context_click(username)</li>
<li>执行：element.perform()<br>
<strong>元素等待</strong><br>
隐形等待&amp;显形等待<br>
推荐隐形：<br>
方法：implicitly_wait(timeout)<br>
(timeout：为等待最大时长，单位：秒)<br>
调用：driver.implicitly_wait(10)<br>
(driver：为浏览器实例化对象名称)<br>
下拉选择框、警告框、滚动条操作<br>
下拉框select类</li>
<li>select_by_index()                --&gt; 根据option索引来定位，从0开始</li>
<li>select_by_value()                --&gt; 根据option属性 value值来定位</li>
<li>select_by_visible_text()            --&gt; 根据option显示文本来定位<br>
实现代码</li>
<li>导包 Select类 --&gt; from selenium.webdriver.support.select import Select</li>
<li>select(driver.driver.find_element_by_css_selector(&quot;.name&quot;))</li>
<li>调用方法select.select_by_index(0)  0指下标<br>
<strong>警告框处理分三种方式</strong></li>
</ul>
<ol>
<li>获取警告框<br>
alert=driver.switch_to.alert</li>
<li>调用<br>
alert.text   --&gt; 返回alert/confirm/prompt中的文字信息<br>
alert.accept()    --&gt; 接受对话框选项<br>
alert.dismiss()   --&gt; 取消对话框选项<br>
<strong>处理警告框总结</strong></li>
</ol>
<ul>
<li>driver.find_element_by_id(&quot;alerta&quot;).click()   # 定位alerta按钮</li>
<li>alert=driver.switch_to.alert # 获取警告框</li>
<li>alert.accept()    # 接受警告框</li>
<li>alert.dismiss()   # 取消警告框<br>
<strong>滚动条实现</strong></li>
<li>js1=&quot;window.scrollTo(0,1000)&quot;  * # 最底层</li>
<li>js2=&quot;window.scrollTo(0,0)&quot;  * # 最顶层</li>
<li>driver.execute_script(js1)  * # 执行最底层</li>
<li>driver.execute_script(js2)  * # 执行最顶层<br>
<strong>frame表单切换、多窗口切换</strong><br>
面对一个页面有两个及以上的嵌入页面，在当前页面中无法定位到a和b页面</li>
</ul>
<ol>
<li>driver.switch_to.frame(&quot;myframe1&quot;) a表单中frame标签的值</li>
<li>需重新进入恢复默认页面 driver.switch_to.default_content()</li>
<li>driver.switch_to.frame(&quot;myframe2&quot;) b表单<br>
<strong>多窗口</strong></li>
<li>driver.current_window_handle         --&gt; 获取当前窗口句柄</li>
<li>driver.window_handles                 --&gt; 获取所有窗口句柄遍历判断</li>
<li>driver.switch_to.window(handle)        --&gt; 切换指定句柄窗口<br>
<strong>窗口截图</strong><br>
get_screenshot_as_file(imgpath)   --imgpath为保存路径<br>
<strong>记录cookie</strong></li>
</ol>
<ul>
<li>get_cookie(name)   -- 获取cookie</li>
<li>driver.add_cookie ({keys:value}) --在webdriver中增加cookie</li>
<li>driver.refresh()  --刷新页面</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[github+Gridea静态博客]]></title>
        <id>https://gaL.github.io/post/githubgridea-jing-tai-bo-ke</id>
        <link href="https://gaL.github.io/post/githubgridea-jing-tai-bo-ke">
        </link>
        <updated>2019-09-07T05:36:19.000Z</updated>
        <content type="html"><![CDATA[<p>创建github博客<br>
注册一个github账户<br>
生成ssh上传github</p>
<ul>
<li>点击new reposittory创建新项目<br>
注意命名规则，项目名字repository name ：github用户名.github.io<br>
勾选 inltializa this repository with a README<br>
create repository 创建仓库</li>
</ul>
]]></content>
    </entry>
</feed>